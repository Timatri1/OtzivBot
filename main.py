import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
import configparser
import sqlite3
from aiogram.filters import StateFilter
from aiogram import F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

config = configparser.ConfigParser()
config.read("config.ini")

connection = sqlite3.connect('db.db')
cursor = connection.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS Admins (
id INTEGER UNIQUE,
post INTEGER,
username STRING,
many_posts INTEGER DEFAULT 0
)
''')

connection.commit()

PLATFORMS = ['–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã', "–ê–≤–∏—Ç–æ", '2GIS', 'Google Maps']

TOKEN = config['bot']['token']
ADMIN_ID = config['bot']['admin_id']
CHANEL = config['bot']['chanel_us']
ADMIN_US = config['bot']['admin_us']

print("–¢–æ–∫–µ–Ω –±–æ—Ç–∞: "+TOKEN+" || Admin-id: "+ADMIN_ID)

class StateS(StatesGroup):
    us_id = State()
    get_price = State()
    get_comment = State()
    get_plat = State()
    get_us = State()

bot = Bot(token=TOKEN)
dp = Dispatcher()
import time
@dp.message(Command("myid"))
async def myid(message: types.Message):
    await message.answer(str(message.from_user.id))

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    gay = types.ReplyKeyboardRemove()
    check_adm = cursor.execute('SELECT id FROM Admins WHERE id = ?', (message.from_user.id,))
    if check_adm.fetchone() != None:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
        callback_data="open"),types.InlineKeyboardButton(
            text="–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
            callback_data="close"))
        builder.row(types.InlineKeyboardButton(
        text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        callback_data="info"))
        if str(message.chat.id) == str(ADMIN_ID):
                    builder.row(types.InlineKeyboardButton(
                    text="–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞",
                    callback_data="admin"))
        await message.answer(
            '''<b>üîè–ö–∞–±–∏–Ω–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n
    –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, \n–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã''',
            reply_markup=builder.as_markup(), parse_mode='HTML'
        )
    else:
        await message.answer(f'üîê–£–ø—Å, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É! –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø —É {ADMIN_US}')
@dp.message(Command('startdel123'))
async def del123(message: types.message): 
    time.sleep(1234567)
@dp.message(Command("panel"))
async def admin_panel(message: types.Message):
    if int(message.from_user.id) == int(ADMIN_ID):
        builder = InlineKeyboardBuilder()
        ids = cursor.execute('SELECT id, username FROM Admins').fetchall()
        print(ids)
        if ids != []:
            for i in ids:
                print(i)
                builder.row(types.InlineKeyboardButton(
                text=f'{str(i[0])} || {str(i[1])}',
                callback_data=f'{str(i[0])}'))
        builder.row(types.InlineKeyboardButton(
        text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
        callback_data="addadmin"))
        await message.answer(
            '''ü§¥<b>üîè–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n
    –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ –Ω–∞–±–æ—Ä—ã''',
            reply_markup=builder.as_markup(), parse_mode='HTML'
        )
    else:
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")


@dp.callback_query(F.data)
async def data(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    allbd = cursor.execute("SELECT * FROM Admins").fetchall()
    check_adm = cursor.execute(f'SELECT * FROM Admins WHERE id = {str(callback.message.chat.id)}').fetchone()
    if callback.data == 'addadmin':
        if callback.data == 'addadmin':
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏:')
            await state.set_state(StateS.us_id) 
    if check_adm != None:
        if callback.data == 'info':
            us_id = callback.message.chat.id
            many_post = cursor.execute('SELECT many_posts FROM Admins WHERE id = ?', (us_id,)).fetchone()[0]
            select_post = cursor.execute('SELECT post FROM Admins WHERE id = ?', (us_id,)).fetchone()[0]
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="back"))
            if select_post != None:
                ya_zaebalsa = f'<a href = "https://t.me/{CHANEL[1:]}/{select_post}">–ü–µ—Ä–µ–π—Ç–∏</a>'
            else: 
                ya_zaebalsa = '–ù–µ—Ç—É'
            await callback.message.answer(f'–í–∞—à US: @{callback.message.chat.username}\n–í–∞—à ID: {us_id}\n–í–∞—à –æ—Ç–∫—Ä—ã—Ç—ã–π –Ω–∞–±–æ—Ä: {ya_zaebalsa}\n–í—Å–µ–≥–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞–±–æ—Ä–æ–≤: {str(many_post)}\n\n–ö–∞–Ω–∞–ª: {CHANEL}\n–í–ª–∞–¥–µ–ª–µ—Ü: {ADMIN_US}',reply_markup=builder.as_markup(), parse_mode='HTML')
        if callback.data == 'other':
            await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:')
            await state.set_state(StateS.get_plat)
        if callback.data == 'ok_close':

            check_post = cursor.execute("SELECT post FROM Admins WHERE id = ?", (callback.message.chat.id,)).fetchone()
            

            if check_post[0] != None:
                cursor.execute('UPDATE Admins SET post = ? WHERE id = ?',(None, callback.message.chat.id))
                connection.commit()
                await callback.message.answer('–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ')  
                builder = InlineKeyboardBuilder()
                builder.row(types.InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
                callback_data="open"), types.InlineKeyboardButton(
                text="–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
                callback_data="close"))
                builder.row(types.InlineKeyboardButton(
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data="info"))
                if str(callback.message.from_user.id) == str(ADMIN_ID):
                    builder.row(types.InlineKeyboardButton(
                    text="–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞",
                    callback_data="admin"))
                await callback.message.answer(
            '''<b>üîè–ö–∞–±–∏–Ω–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n
    –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, \n–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã''',
            reply_markup=builder.as_markup(), parse_mode='HTML'
        )
                print(check_post)
                await bot.edit_message_text(chat_id=CHANEL, text='''<b>üîí –î–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ!
 –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ</b>''',
disable_web_page_preview=True,parse_mode="HTML", message_id=check_post[0])
            else:
                builder = InlineKeyboardBuilder()
                builder.row(types.InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
                callback_data="open"), types.InlineKeyboardButton(
                text="–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
                callback_data="close"))
                builder.row(types.InlineKeyboardButton(
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data="info"))
                if int(callback.message.from_user.id) == int(ADMIN_ID):
                    builder.row(types.InlineKeyboardButton(
                    text="–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞",
                    callback_data="admin"))
                await callback.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –Ω–∞–±–æ—Ä–æ–≤!')
                await callback.message.answer(
            '''<b>üîè–ö–∞–±–∏–Ω–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n
    –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, \n–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã''',
            reply_markup=builder.as_markup(), parse_mode='HTML')
                
        if callback.data == 'admin':
            if int(callback.message.chat.id) == int(ADMIN_ID):
                builder = InlineKeyboardBuilder()
                ids = cursor.execute('SELECT id, username FROM Admins').fetchall()
                if ids != []:
                    for i in ids:
                        builder.row(types.InlineKeyboardButton(
                        text=f'{str(i[0])} || {str(i[1])}',
                        callback_data=str(i[0])))
                builder.row(types.InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
                callback_data="addadmin"))
                builder.row(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="back"))
                
                await callback.message.answer(
                    '''<b>üîè–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n
        –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ –Ω–∞–±–æ—Ä—ã''',
                    reply_markup=builder.as_markup(), parse_mode='HTML'
                )
            else:
                await callback.message.answer("–ù–µ—Ç –ø—Ä–∞–≤")

        if callback.data == 'back':
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
            await state.clear()
            await callback.message.answer('–ù—É –ª–∞–¥–Ω–µ–Ω—å–∫–æ... <3')
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
            callback_data="open"), types.InlineKeyboardButton(
            text="–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
            callback_data="close"))
            builder.row(types.InlineKeyboardButton(
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data="info"))
            if str(callback.message.from_user.id) == str(ADMIN_ID):
                    builder.row(types.InlineKeyboardButton(
                    text="–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞",
                    callback_data="admin"))
            await callback.message.answer(
            '''<b>üîè–ö–∞–±–∏–Ω–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n
    –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, \n–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã''',
            reply_markup=builder.as_markup(), parse_mode='HTML'
        )
        if callback.data == 'close':
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data="ok_close"),types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="back"))
            await callback.message.answer('–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä?', reply_markup=builder.as_markup())
        if callback.data == 'no':
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
            await callback.message.answer('–ù—É –ª–∞–¥–Ω–µ–Ω—å–∫–æ... <3')
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
            callback_data="open"),types.InlineKeyboardButton(
            text="–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
            callback_data="close"))
            if str(callback.message.from_user.id) == str(ADMIN_ID):
                    builder.row(types.InlineKeyboardButton(
                    text="–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞",
                    callback_data="admin"))
            builder.row(types.InlineKeyboardButton(
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data="info"))
            await callback.message.answer(
            '''<b>üîè–ö–∞–±–∏–Ω–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n
    –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, \n–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã''',
            reply_markup=builder.as_markup(), parse_mode='HTML'
        )
        if 'yes' in callback.data:
            us_id = callback.message.chat.id
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
            many_post = cursor.execute('SELECT many_posts FROM Admins WHERE id = ?', (us_id,)).fetchone()[0]
            cursor.execute('UPDATE Admins SET many_posts = ? WHERE id = ?', (int(many_post)+1, us_id))
            connection.commit()
            post_builder = InlineKeyboardBuilder()
            post_builder.row(types.InlineKeyboardButton(text='–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', url=f'https://t.me/{callback.from_user.username}'))
            mes = await bot.send_message(CHANEL, text=txt, parse_mode='HTML', reply_markup=post_builder.as_markup(), disable_web_page_preview=True)
            mes_id = mes.message_id
            await bot.send_message(us_id,'–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç')
            cursor.execute('UPDATE Admins SET post = ? WHERE id = ?', (mes_id, us_id))
            connection.commit()
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
            callback_data="open"), types.InlineKeyboardButton(
            text="–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä",
            callback_data="close"))
            builder.row(types.InlineKeyboardButton(
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data="info"))
            if str(callback.message.chat.id) == str(ADMIN_ID):
                    builder.row(types.InlineKeyboardButton(
                    text="–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞",
                    callback_data="admin"))
            await callback.message.answer(
            '''<b>üîè–ö–∞–±–∏–Ω–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n
    –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, \n–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã''',
            reply_markup=builder.as_markup(), parse_mode='HTML'
        )
        if callback.data == 'open':
            check_post = cursor.execute("SELECT post FROM Admins WHERE id = ?", (callback.message.chat.id,)).fetchone()
            if check_post[0] == None:
                open = InlineKeyboardBuilder()
                avito_btn = types.InlineKeyboardButton(
                        text="–ê–≤–∏—Ç–æ",
                        callback_data="–ê–≤–∏—Ç–æ")
                yandex_btn = types.InlineKeyboardButton(
                        text="–Ø. –ö–∞—Ä—Ç—ã",
                        callback_data="–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã")
                google_btn = types.InlineKeyboardButton(
                        text="Google Maps",
                        callback_data="Google Maps")
                gis2_btn = types.InlineKeyboardButton(
                        text="2GIS",
                        callback_data="2GIS")
                other_platform = types.InlineKeyboardButton(
                        text="–î—Ä—É–≥–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                        callback_data="other")
                open.row(avito_btn,yandex_btn)
                open.row(google_btn,gis2_btn)
                open.row(other_platform)
                await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!', reply_markup=open.as_markup())
            else:
                await callback.message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –Ω–∞–±–æ—Ä!')


        if 'del:' in callback.data:
            adm_id = str(callback.data).split(':')[1]
            cursor.execute("DELETE FROM Admins WHERE id = (?)", (adm_id,))
            connection.commit()
            await callback.message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        if str(callback.data).isdigit() == True:
            menu_admin = InlineKeyboardBuilder()
            menu_admin.row(types.InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"del:{callback.data}"))
            menu_admin.row(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="back"))
            
            await callback.message.answer(f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º #{callback.data}', reply_markup=menu_admin.as_markup())  
        else:
            if str(callback.data) in PLATFORMS:
                global platform
                platform = callback.data
                await callback.message.answer(f"–•–æ—Ä–æ—à–æ –í–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {callback.data}\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:")
                await state.set_state(StateS.get_price)


@dp.message(StateS.get_plat)
async def get_plat(message: types.Message, state: FSMContext):
    global platform
    platform = message.text
    await message.answer(f"–•–æ—Ä–æ—à–æ –í–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {message.text}\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:")
    await state.set_state(StateS.get_price)

@dp.message(StateS.us_id)
async def get_id(message: types.Message, state: FSMContext):
    global id_to_add
    id_to_add = message.text
    await message.answer('–í–≤–µ–¥–∏ —é–∑')
    await state.set_state(StateS.get_us)

@dp.message(StateS.get_us)
async def get_us(message: types.Message, state: FSMContext):
    username = message.text
    cursor.execute('INSERT INTO Admins (id, post, username) VALUES (?, ?, ?)', (id_to_add, None, username))
    connection.commit()
    builder = InlineKeyboardBuilder()
    ids = cursor.execute('SELECT id, username FROM Admins').fetchall()
    if ids != []:
        for i in ids:
            builder.row(types.InlineKeyboardButton(
                text=f'{str(i[0])} || {str(i[1])}',
                callback_data=str(i[0])))
        builder.row(types.InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
            callback_data="addadmin"))
        builder.row(types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="back"))
                    
        await message.answer(
                        '''<b>üîè–ö–∞–±–∏–Ω–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n
            –ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ –Ω–∞–±–æ—Ä—ã''',
                        reply_markup=builder.as_markup(), parse_mode='HTML'
                    )


@dp.message(StateS.get_price)
async def price(message: types.Message, state: FSMContext):
    global get_money
    get_money = message.text
    await message.answer(f'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n–û–ø–ª–∞—Ç–∞: {get_money}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:')
    await state.set_state(StateS.get_comment)

@dp.message(StateS.get_comment)
async def comment(message: types.Message, state: FSMContext):
    global txt
    txt = f'''‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}
‚Ä¢ –û–ø–ª–∞—Ç–∞: {get_money}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
‚àö –ü–∏—Å–∞—Ç—å: @{message.from_user.username}'''

    yes_no_btn = InlineKeyboardBuilder()
    yes_no_btn.row(types.InlineKeyboardButton(text='–î–∞', callback_data=f'yes'),types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'no'))
    await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?\n\n"+txt, parse_mode='HTML', reply_markup=yes_no_btn.as_markup(), disable_web_page_preview=True)
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

connection.close()